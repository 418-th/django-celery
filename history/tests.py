from django.test import TestCase
from mixer.backend.django import mixer
from moneyed import Money

from crm.models import Customer
from elk.utils.mockers import mock_request
from history.models import PaymentEvent
from hub.models import Class
from lessons.models import OrdinaryLesson


class TestEvent(TestCase):
    fixtures = ('crm', 'products', 'lessons')

    def setUp(self):
        self.request = mock_request()

    def test_storing_request(self):
        """
        Unit test for populating log entry model with request.
        """
        ev = PaymentEvent()
        ev.store_request(self.request)

        # Assertions are based on fixtures, generated by elk.utils.mockers.mock_request
        self.assertEqual(ev.is_mobile, self.request.user_agent.is_mobile)
        self.assertEqual(ev.is_tablet, self.request.user_agent.is_tablet)
        self.assertEqual(ev.is_pc, self.request.user_agent.is_pc)

        self.assertEqual(ev.browser_family, 'Mobile Safari')
        self.assertEqual(ev.browser_version, '5.2')
        self.assertEqual(ev.os_family, 'WinXP')
        self.assertEqual(ev.os_version, '5.3')
        self.assertEqual(ev.device, 'iPhone')

        self.assertEqual(ev.raw_useragent, 'WinXP; U/16')
        self.assertEqual(ev.ip, '127.0.0.5')

    def test_single_lesson_log_entry_creation(self):
        """
        Buy a single lesson and find a respective log entry for it
        """
        customer = mixer.blend(Customer)
        c = Class(
            customer=customer,
            lesson=OrdinaryLesson.get_default(),
            buy_price=Money(10, 'USD'),
            buy_source=0,
        )
        c.request = self.request
        c.save()

        self.assertEquals(customer.payments.count(), 1)
        self.assertEquals(customer.payments.get(pk=1).product, c)
